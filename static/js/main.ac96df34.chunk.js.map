{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["projectsData","id","name","description","url","algorithmData","coursesCompleted","App","projectComponents","map","project","Project","key","algorithmComponents","coursesComponents","course","Course","class","props","href","target","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAIMA,G,UAAe,CACpB,CACCC,GAAI,EACJC,KAAM,qBACNC,YACC,oHACDC,IAAK,yCAEN,CACCH,GAAI,EACJC,KAAM,yBACNC,YACC,8KACDC,IAAK,yCAEN,CACCH,GAAI,EACJC,KAAM,qBACNC,YACC,4EACDC,IAAK,mDAEN,CACCH,GAAI,EACJC,KAAM,+BACNC,YACC,kFACDC,IAAK,yCAEN,CACCH,GAAI,EACJC,KAAM,uBACNC,YACC,2GACDC,IAAK,yCAEN,CACCH,GAAI,EACJC,KAAM,cACNC,YACC,wFACDC,IAAK,2CAIDC,EAAgB,CACrB,CACCJ,GAAI,EACJC,KAAM,gBACNC,YACC,4KACDC,IAAK,+CAEN,CACCH,GAAI,EACJC,KAAM,6BACNC,YAAa,gHACbC,IAAK,4DAEN,CACCH,GAAI,EACJC,KAAM,iBACNC,YAAa,qIACbC,IAAK,gDAEN,CACCH,GAAI,EACJC,KAAM,0BACNC,YAAa,oFACbC,IAAK,yDAEN,CACCH,GAAI,EACJC,KAAM,qBACNC,YAAa,4HACbC,IAAK,qDAIDE,EAAmB,CACxB,CACCL,GAAI,EACJC,KAAM,wBACNE,IACC,iFAEF,CACCH,GAAI,EACJC,KAAM,4CACNE,IACC,sGAIH,SAASG,IACR,IAAMC,EAAoBR,EAAaS,KAAI,SAACC,GAAD,OAC1C,kBAACC,EAAD,CACCC,IAAKF,EAAQT,GACbC,KAAMQ,EAAQR,KACdC,YAAaO,EAAQP,YACrBC,IAAKM,EAAQN,SAGTS,EAAsBR,EAAcI,KAAI,SAACC,GAAD,OAC7C,kBAACC,EAAD,CACCC,IAAKF,EAAQT,GACbC,KAAMQ,EAAQR,KACdC,YAAaO,EAAQP,YACrBC,IAAKM,EAAQN,SAGTU,EAAoBR,EAAiBG,KAAI,SAACM,GAAD,OAC9C,kBAACC,EAAD,CAAQJ,IAAKG,EAAOd,GAAIC,KAAMa,EAAOb,KAAME,IAAKW,EAAOX,SAExD,OACC,yBAAKa,MAAM,aACV,yBAAKA,MAAM,WACV,yBAAKA,MAAM,SACV,8CACA,uHAKD,wBAAIA,MAAM,mBAAV,gBACA,yBAAKA,MAAM,qBAAqBT,GAChC,wBAAIS,MAAM,mBAAV,gCACA,yBAAKA,MAAM,qBAAqBJ,GAChC,wBAAII,MAAM,mBAAV,qBACA,yBAAKA,MAAM,oBAAoBH,KAMnC,SAASH,EAAQO,GAChB,OACC,uBAAGD,MAAM,eAAeE,KAAMD,EAAMd,IAAKgB,OAAO,UAC/C,4BAAKF,EAAMhB,MACX,2BAAIgB,EAAMf,cAKb,SAASa,EAAOE,GACf,OACC,2BACC,uBAAGC,KAAMD,EAAMd,IAAKgB,OAAO,SAASH,MAAM,eACxCC,EAAMhB,OAMXmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAElCjB,QCpJKkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASC,eAAe,SDyHpB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac96df34.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nconst projectsData = [\n\t{\n\t\tid: 5,\n\t\tname: \"Markdown Previewer\",\n\t\tdescription:\n\t\t\t\"I created a web app which allows a user to type in plain text. The app will convert it into markdown styled text.\",\n\t\turl: \"https://codepen.io/amg93/full/MWKpJME\"\n\t},\n\t{\n\t\tid: 4,\n\t\tname: \"Random Quote Generator\",\n\t\tdescription:\n\t\t\t\"This is a web app which will generate a random quote from an API. The user can click a button to generate a new quote and another button to tweet the quote and its author.\",\n\t\turl: \"https://codepen.io/amg93/full/NWxpNNB\"\n\t},\n\t{\n\t\tid: 6,\n\t\tname: \"Palindrome Checker\",\n\t\tdescription:\n\t\t\t\"I built a simple JavaScript program to check if a string is a palindrome.\",\n\t\turl: \"https://repl.it/@agoldstone93/PalindromeChecker\"\n\t},\n\t{\n\t\tid: 3,\n\t\tname: \"Technical Documentation Page\",\n\t\tdescription:\n\t\t\t\"This is a page which displays a lot of information within a technical document.\",\n\t\turl: \"https://codepen.io/amg93/full/KKpJzYZ\"\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"Product Landing Page\",\n\t\tdescription:\n\t\t\t\"This is an example product landing page. It contains an embedded video and information laid out clearly.\",\n\t\turl: \"https://codepen.io/amg93/full/abOXzQL\"\n\t},\n\t{\n\t\tid: 1,\n\t\tname: \"Survey Form\",\n\t\tdescription:\n\t\t\t\"This is a basic survey form which allows users to enter information about themselves.\",\n\t\turl: \"https://codepen.io/amg93/full/qBdEQNJ\"\n\t}\n];\n\nconst algorithmData = [\n\t{\n\t\tid: 1,\n\t\tname: \"Cash Register\",\n\t\tdescription:\n\t\t\t\"This algorithm should take an input of the price of an item, the amount paid in cash, and return the contents of the cash register as an array following the transaction.\",\n\t\turl: \"https://repl.it/@agoldstone93/Cash-Register\"\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"Telephone Number Validator\",\n\t\tdescription: \"This JavaScript program returns a Boolean value to represent whether the input is a valid US telephone number\",\n\t\turl: \"https://repl.it/@agoldstone93/Telephone-Number-Validator\"\n\t},\n\t{\n\t\tid: 3,\n\t\tname: \"Caesars Cipher\",\n\t\tdescription: \"This program will take an enciphered input which has been Caesar shifted by 13 spaces returns upper case if given lower case input\",\n\t\turl: \"https://repl.it/@agoldstone93/Ceasars-Cipher\"\n\t},\n\t{\n\t\tid: 4,\n\t\tname: \"Roman Numeral Converter\",\n\t\tdescription: \"This will take an inputted roman numeral and output the converted decimal number.\",\n\t\turl: \"https://repl.it/@agoldstone93/Roman-Numeral-Converter\"\n\t},\n\t{\n\t\tid: 5,\n\t\tname: \"Palindrome Checker\",\n\t\tdescription: \"This program will take a string as an input and will return a Boolean value indicating whether or not it is a palindrome.\",\n\t\turl: \"https://repl.it/@agoldstone93/Palindrome-Checker\"\n\t}\n];\n\nconst coursesCompleted = [\n\t{\n\t\tid: 1,\n\t\tname: \"Responsive Web Design\",\n\t\turl:\n\t\t\t\"https://www.freecodecamp.org/certification/agoldstone93/responsive-web-design\"\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"JavaScript Algorithms and Data Structures\",\n\t\turl:\n\t\t\t\"https://www.freecodecamp.org/certification/agoldstone93/javascript-algorithms-and-data-structures\"\n\t}\n];\n\nfunction App() {\n\tconst projectComponents = projectsData.map((project) => (\n\t\t<Project\n\t\t\tkey={project.id}\n\t\t\tname={project.name}\n\t\t\tdescription={project.description}\n\t\t\turl={project.url}\n\t\t/>\n\t));\n\tconst algorithmComponents = algorithmData.map((project) => (\n\t\t<Project\n\t\t\tkey={project.id}\n\t\t\tname={project.name}\n\t\t\tdescription={project.description}\n\t\t\turl={project.url}\n\t\t/>\n\t));\n\tconst coursesComponents = coursesCompleted.map((course) => (\n\t\t<Course key={course.id} name={course.name} url={course.url} />\n\t));\n\treturn (\n\t\t<div class=\"container\">\n\t\t\t<div class=\"content\">\n\t\t\t\t<div class=\"intro\">\n\t\t\t\t\t<h1>Adam Goldstone</h1>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tI am a self taught programmer with experience using HTML, CSS, JavaScript,\n\t\t\t\t\t\tReact and C.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<h2 class=\"section-heading\">Web Projects</h2>\n\t\t\t\t<div class=\"project-container\">{projectComponents}</div>\n\t\t\t\t<h2 class=\"section-heading\">Algorithm Scripting Projects</h2>\n\t\t\t\t<div class=\"project-container\">{algorithmComponents}</div>\n\t\t\t\t<h2 class=\"section-heading\">Courses Completed</h2>\n\t\t\t\t<div class=\"course-container\">{coursesComponents}</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction Project(props) {\n\treturn (\n\t\t<a class=\"project-item\" href={props.url} target=\"_blank\">\n\t\t\t<h3>{props.name}</h3>\n\t\t\t<p>{props.description}</p>\n\t\t</a>\n\t);\n}\n\nfunction Course(props) {\n\treturn (\n\t\t<p>\n\t\t\t<a href={props.url} target=\"_blank\" class=\"course-item\">\n\t\t\t\t{props.name}\n\t\t\t</a>\n\t\t</p>\n\t);\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}